// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package proto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	util "tail-based-sampling/src/util"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson22b38c74DecodeTailBasedSamplingSrcProto(in *jlexer.Lexer, out *TraceMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trace_map":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Traces = make(util.TraceMap)
				for !in.IsDelim('}') {
					key := util.TraceId(in.String())
					in.WantColon()
					var v1 util.SpanSlice
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make(util.SpanSlice, 0, 2)
							} else {
								v1 = util.SpanSlice{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 util.Span
							if in.IsNull() {
								in.Skip()
								v2 = nil
							} else {
								v2 = in.Bytes()
							}
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Traces)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b38c74EncodeTailBasedSamplingSrcProto(out *jwriter.Writer, in TraceMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"trace_map\":"
		out.RawString(prefix[1:])
		if in.Traces == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Traces {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				if v4Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v5, v6 := range v4Value {
						if v5 > 0 {
							out.RawByte(',')
						}
						out.Base64Bytes(v6)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TraceMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b38c74EncodeTailBasedSamplingSrcProto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b38c74EncodeTailBasedSamplingSrcProto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TraceMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b38c74DecodeTailBasedSamplingSrcProto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b38c74DecodeTailBasedSamplingSrcProto(l, v)
}
func easyjson22b38c74DecodeTailBasedSamplingSrcProto1(in *jlexer.Lexer, out *TraceIds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trace_ids":
			if in.IsNull() {
				in.Skip()
				out.TraceIds = nil
			} else {
				in.Delim('[')
				if out.TraceIds == nil {
					if !in.IsDelim(']') {
						out.TraceIds = make([]util.TraceId, 0, 4)
					} else {
						out.TraceIds = []util.TraceId{}
					}
				} else {
					out.TraceIds = (out.TraceIds)[:0]
				}
				for !in.IsDelim(']') {
					var v9 util.TraceId
					v9 = util.TraceId(in.String())
					out.TraceIds = append(out.TraceIds, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b38c74EncodeTailBasedSamplingSrcProto1(out *jwriter.Writer, in TraceIds) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"trace_ids\":"
		out.RawString(prefix[1:])
		if in.TraceIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.TraceIds {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TraceIds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b38c74EncodeTailBasedSamplingSrcProto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceIds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b38c74EncodeTailBasedSamplingSrcProto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TraceIds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b38c74DecodeTailBasedSamplingSrcProto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceIds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b38c74DecodeTailBasedSamplingSrcProto1(l, v)
}
